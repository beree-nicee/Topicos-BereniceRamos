package org.example;

interface Vehiculo { // Interfaz que define el contrato com√∫n para todos los veh√≠culos
    void acelerar(); // M√©todo abstracto para acelerar
    void frenar(); // M√©todo abstracto para frenar
    void mostrarInfo(); // M√©todo abstracto para mostrar informaci√≥n
}


class Coche implements Vehiculo { // Clase que implementa la interfaz Vehiculo para coches
    private String marca; // Campo privado para la marca del coche
    private String modelo; // Campo privado para el modelo del coche

    public Coche(String marca, String modelo) { // Constructor que recibe marca y modelo
        this.marca = marca; //Asigna el par√°metro marca al campo marca de la instancia
        this.modelo = modelo; // Asigna el modelo recibido al campo de instancia
    }

    @Override
    public void acelerar() { // Implementaci√≥n espec√≠fica del m√©todo acelerar para coches
        // Mensaje personalizado de aceleraci√≥n
        System.out.println("El coche " + marca + " " + modelo + " est√° acelerando por la carretera");
    }

    @Override
    public void frenar() { // Implementaci√≥n espec√≠fica del m√©todo frenar para coches
        System.out.println("El coche est√° frenando con frenos de disco"); // Mensaje sobre el tipo de frenos
    }

    @Override
    public void mostrarInfo() { // Implementaci√≥n espec√≠fica para mostrar informaci√≥n del coche
        System.out.println("üöó Coche: " + marca + " " + modelo + " - 4 ruedas, motor a gasolina"); // Informaci√≥n completa del coche
    }
}

class Motocicleta implements Vehiculo { // Clase que implementa la interfaz Vehiculo para motocicletas
    private String marca; // Campo privado para la marca de la motocicleta
    private int cilindrada; // Campo privado para la cilindrada en cc

    public Motocicleta(String marca, int cilindrada) { // Constructor que recibe marca y cilindrada
        this.marca = marca; // Asigna la marca recibida al campo de instancia
        this.cilindrada = cilindrada; // Asigna la cilindrada recibida al campo de instancia
    }

    @Override
    public void acelerar() { // Implementaci√≥n espec√≠fica del m√©todo acelerar para motocicletas
        System.out.println("La motocicleta " + marca + " est√° acelerando con " + cilindrada + "cc"); // Mensaje con marca y cilindrada
    }

    @Override
    public void frenar() { // Implementaci√≥n espec√≠fica del m√©todo frenar para motocicletas
        System.out.println("La motocicleta est√° frenando con precauci√≥n"); // Mensaje sobre frenado precautivo
    }

    @Override
    public void mostrarInfo() { // Implementaci√≥n espec√≠fica para mostrar informaci√≥n de la motocicleta
        System.out.println("üèçÔ∏è Motocicleta: " + marca + " " + cilindrada + "cc - 2 ruedas, √°gil y r√°pida"); // Informaci√≥n completa con caracter√≠sticas
    }
}

class Camion implements Vehiculo { // Clase que implementa la interfaz Vehiculo para camiones
    private String marca; // Campo privado para la marca del cami√≥n
    private double capacidadCarga; // Campo privado para la capacidad de carga en toneladas

    public Camion(String marca, double capacidadCarga) { // Constructor que recibe marca y capacidad
        this.marca = marca; // Asigna la marca recibida al campo de instancia
        this.capacidadCarga = capacidadCarga; // Asigna la capacidad recibida al campo de instancia
    }

    @Override
    public void acelerar() { // Implementaci√≥n espec√≠fica del m√©todo acelerar para camiones
        System.out.println("El cami√≥n " + marca + " est√° acelerando lentamente con " + capacidadCarga + " toneladas"); // Mensaje con peso que justifica velocidad lenta
    }

    @Override
    public void frenar() { // Implementaci√≥n espec√≠fica del m√©todo frenar para camiones
        System.out.println("El cami√≥n est√° frenando con sistema de frenos neum√°tico"); // Mensaje sobre sistema de frenos espec√≠fico
    }

    @Override
    public void mostrarInfo() { // Implementaci√≥n espec√≠fica para mostrar informaci√≥n del cami√≥n
        System.out.println("üöõ Cami√≥n: " + marca + " - Capacidad: " + capacidadCarga + " toneladas"); // Informaci√≥n con capacidad de carga
    }
}


enum TipoVehiculo { // Enumeraci√≥n que define los tipos de veh√≠culos disponibles
    COCHE, MOTOCICLETA, CAMION // Constantes que representan cada tipo de veh√≠culo
}


class VehiculoFactory { // Clase Factory que implementa el patr√≥n Factory para crear veh√≠culos


    public static Vehiculo crearVehiculo(TipoVehiculo tipo, String... parametros) { // M√©todo est√°tico principal que crea veh√≠culos seg√∫n tipo y par√°metros
        switch (tipo) { // Switch para determinar qu√© tipo de veh√≠culo crear
            case COCHE: // Caso para crear un coche
                if (parametros.length >= 2) { // Verifica si hay al menos 2 par√°metros
                    return new Coche(parametros[0], parametros[1]); // Crea coche con par√°metros espec√≠ficos
                } else {
                    return new Coche("Toyota", "Corolla");  // Crea coche con valores por defecto
                }

            case MOTOCICLETA: // Caso para crear una motocicleta
                if (parametros.length >= 2) { // Verifica par√°metros suficientes
                    try {
                        int cilindrada = Integer.parseInt(parametros[1]); // Convierte segundo par√°metro a entero
                        return new Motocicleta(parametros[0], cilindrada); // Crea motocicleta con par√°metros convertidos
                    } catch (NumberFormatException e) { // Maneja error de conversi√≥n
                        return new Motocicleta(parametros[0], 250);  // Usa cilindrada por defecto si falla conversi√≥n
                    }
                } else {
                    return new Motocicleta("Yamaha", 250); // Crea motocicleta con valores por defecto
                }

            case CAMION: // Caso para crear un cami√≥n
                if (parametros.length >= 2) { // Verifica par√°metros suficientes
                    try {
                        double capacidad = Double.parseDouble(parametros[1]); // Convierte segundo par√°metro a double
                        return new Camion(parametros[0], capacidad); // Crea cami√≥n con par√°metros convertidos
                    } catch (NumberFormatException e) { // Maneja error de conversi√≥n
                        return new Camion(parametros[0], 10.0); // Usa capacidad por defecto si falla conversi√≥n
                    }
                } else {
                    return new Camion("Volvo", 15.0); // Crea cami√≥n con valores por defecto
                }

            default: // Caso por defecto para tipos no v√°lidos
                throw new IllegalArgumentException("Tipo de veh√≠culo no soportado: " + tipo); // Lanza excepci√≥n para tipos no soportados
        }
    }


    public static Vehiculo crearVehiculoPorDefecto(TipoVehiculo tipo) { // M√©todo auxiliar que crea veh√≠culos con valores por defecto
        return crearVehiculo(tipo); // Llama al m√©todo principal sin par√°metros adicionales
    }
}


public class Main { // Clase principal que demuestra el patr√≥n Factory

    public static void main(String[] args) { // M√©todo main - punto de entrada del programa
        System.out.println("=== DEMOSTRACI√ìN DEL PATR√ìN FACTORY ===\n"); // T√≠tulo de la demostraci√≥n


        Vehiculo coche1 = VehiculoFactory.crearVehiculo(TipoVehiculo.COCHE, "Honda", "Civic"); // Crea coche con par√°metros espec√≠ficos
        Vehiculo moto1 = VehiculoFactory.crearVehiculo(TipoVehiculo.MOTOCICLETA, "Kawasaki", "600"); // Crea motocicleta con par√°metros espec√≠ficos
        Vehiculo camion1 = VehiculoFactory.crearVehiculo(TipoVehiculo.CAMION, "Mercedes", "12.5"); // Crea cami√≥n con par√°metros espec√≠ficos


        Vehiculo coche2 = VehiculoFactory.crearVehiculoPorDefecto(TipoVehiculo.COCHE); // Crea coche con valores por defecto
        Vehiculo moto2 = VehiculoFactory.crearVehiculoPorDefecto(TipoVehiculo.MOTOCICLETA); // Crea motocicleta con valores por defecto


        Vehiculo[] vehiculos = {coche1, moto1, camion1, coche2, moto2}; // Arreglo que contiene todos los veh√≠culos creados


        System.out.println("1. INFORMACI√ìN DE VEH√çCULOS:"); // Encabezado de la primera secci√≥n
        System.out.println("----------------------------"); // Separador visual
        for (Vehiculo vehiculo : vehiculos) { // Itera sobre cada veh√≠culo en el arreglo
            vehiculo.mostrarInfo(); // Llama al m√©todo mostrarInfo de cada veh√≠culo polim√≥rficamente
        }

        System.out.println("\n2. ACELERANDO TODOS LOS VEH√çCULOS:"); // Encabezado de la segunda secci√≥n
        System.out.println("----------------------------------"); // Separador visual
        for (Vehiculo vehiculo : vehiculos) { // Itera sobre cada veh√≠culo
            vehiculo.acelerar(); // Llama al m√©todo acelerar de cada veh√≠culo polim√≥rficamente
        }

        System.out.println("\n3. FRENANDO TODOS LOS VEH√çCULOS:"); // Encabezado de la tercera secci√≥n
        System.out.println("--------------------------------"); // Separador visual
        for (Vehiculo vehiculo : vehiculos) { // Itera sobre cada veh√≠culo
            vehiculo.frenar(); // Llama al m√©todo frenar de cada veh√≠culo polim√≥rficamente
        }

        System.out.println("\n4. CREACI√ìN DIN√ÅMICA BASADA EN INPUT:"); // Encabezado de la cuarta secci√≥n
        System.out.println("-------------------------------------"); // Separador visual


        String[] tiposInput = {"COCHE", "MOTOCICLETA", "CAMION"}; // Arreglo de strings que representa tipos de veh√≠culos

        for (String tipoStr : tiposInput) { // Itera sobre cada string de tipo
            try {
                TipoVehiculo tipo = TipoVehiculo.valueOf(tipoStr); // Convierte string a enum TipoVehiculo
                Vehiculo vehiculo = VehiculoFactory.crearVehiculoPorDefecto(tipo); // Crea veh√≠culo usando factory
                System.out.print("Creado din√°micamente: "); // Mensaje introductorio
                vehiculo.mostrarInfo(); // Muestra informaci√≥n del veh√≠culo creado din√°micamente
            } catch (IllegalArgumentException e) { // Captura excepci√≥n si el tipo no es v√°lido
                System.out.println("Tipo de veh√≠culo no v√°lido: " + tipoStr); // Mensaje de error para tipos inv√°lidos
            }
        }

        System.out.println("\n=== FIN DE LA DEMOSTRACI√ìN ==="); // Mensaje final de la demostraci√≥n
    }
}


class Bicicleta implements Vehiculo { // Clase adicional que implementa la interfaz Vehiculo
    private String tipo; // Campo privado para el tipo de bicicleta
    private int numVelocidades; // Campo privado para el n√∫mero de velocidades

    public Bicicleta(String tipo, int numVelocidades) { // Constructor que recibe tipo y n√∫mero de velocidades
        this.tipo = tipo; // Asigna el tipo recibido al campo de instancia
        this.numVelocidades = numVelocidades; // Asigna el n√∫mero de velocidades al campo de instancia
    }

    @Override
    public void acelerar() { // Implementaci√≥n espec√≠fica del m√©todo acelerar para bicicletas
        System.out.println("La bicicleta " + tipo + " est√° siendo pedaleada"); // Mensaje espec√≠fico sobre pedalear
    }

    @Override
    public void frenar() { // Implementaci√≥n espec√≠fica del m√©todo frenar para bicicletas
        System.out.println("La bicicleta est√° frenando con frenos de mano"); // Mensaje sobre tipo de frenos
    }

    @Override
    public void mostrarInfo() { // Implementaci√≥n espec√≠fica para mostrar informaci√≥n de la bicicleta
        System.out.println("üö≤ Bicicleta: " + tipo + " - " + numVelocidades + " velocidades, ecol√≥gica"); // Informaci√≥n con caracter√≠stica ecol√≥gica
    }
}
